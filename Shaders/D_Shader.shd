#Shader Vertex
#version 330

layout(location = 0) in vec3 vPos;
layout(location = 1) in vec2 vUVs;
layout(location = 2) in vec3 vNorm;

// Uniform Variables
uniform mat4 uM;
uniform mat4 uV;
uniform mat4 uP;

uniform vec3 uLightPosition;

// Passed Values Variables
out vec2 UVs;

// Variables for main.
vec4 uLightColor = vec4(1.0, 1.0, 1.0, 1.0);
vec4 MaterialDiffuseColor = vec4(0.750);
float LightIntensity = 10.0;
float cosTheta;

vec3 vPosWS;
vec3 vNormWS;

out vec4 color;

void main()
{

    // Object-Space to World-Space.
    vPosWS = (uM * vec4(vPos, 1.0)).xyz;
    vNormWS = (uM * vec4(vNorm, 1.0)).xyz;
    
    // Distance between each vertex and the light.
    float distance = length(vPosWS - uLightPosition);

    // The angle between each vertex normal and the vector from vertex to the current position of the light.
    // The dot product has also been clamped for the reason that the negative values need to be zero.
    // Though cosTheta is not the angle itself, it can be directly used as an intensity factor.
    cosTheta = clamp(dot(normalize(vNormWS), normalize(uLightPosition - vPosWS)), 0, 1);
    color = LightIntensity * MaterialDiffuseColor * uLightColor * cosTheta / (distance*distance);

    gl_Position = uP * uV * uM * vec4(vPos, 1.0);
    UVs = vUVs;
}

#Shader Fragment
#version 330

uniform sampler2D textureSampler;
in vec2 UVs;
in vec4 color;

void main()
{
    gl_FragColor = color * texture(textureSampler, UVs);
    // gl_FragColor = texture(textureSampler, UVs);
}
